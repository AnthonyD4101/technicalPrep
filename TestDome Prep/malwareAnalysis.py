# Your company is analyzing malware which targets numerical record files.

# The malware uses a sliding window over the array of numbers in a file, and tries to match the
# following pattern:

# Tl, -, -, X, -, -, -, Tr

# The entire window is moved so that 'X' passes through all the values and is compared to the numbers
# at the 'Tl' and 'Tr' locations, which are positioned at a constant offset to 'X'.

# Malware has the following rules:
# 1. If the value at the 'Tl' or 'Tr' position of the pattern is bigger or equal to the value at the 'X' position,
# the malware replaces the value at 'X' with 0.
# 2. If the value at the 'Tl' or 'Tr' offset is out of bounds, the the value at 'X' is only compared to the other existing value
# 3. The record is processed in two stages: first, all the positions that should be set to 0 are located, using the original values
# for comparison. Only after all positions have been indentified do they get set to 0

# For example, if the values in a record file are the following:
# [1, 2, 0, 5, 0, 2, 4, 3, 3, 3]

# The expected values after the malware runs are:
# [1, 0, 0, 5, 0, 0, 0, 3, 3, 0]

# In this example, both '2's, the '4's and the last '3's were replaced by 0

# Implement the simluate function so that the malware behavior is replicated for further study

def simulate(entries):
    """
    :param entries: (list(int)) The numerical record files
    :returns: (list(int)) The record files after running the malware
    """
    
    # Write code here
    result = entries[:]

    windowSize = 8
    halfOneWindow = 3
    halfTwoWindow = 4

    for i in range(len(entries)):
        X = entries[i]
        T1 = None
        T2 = None
        
        if i >= halfOneWindow:
            T1 = entries[i - halfOneWindow]

        if (i + halfTwoWindow < len(entries)): T2 = entries[i + halfTwoWindow]

        if T1 is not None and X <= T1:
            result[i] = 0

        if T2 is not None and X <= T2:
            result[i] = 0

    return result

records = [1, 2, 0, 5, 0, 2, 4, 3, 3, 3]
print(simulate(records))
# Expected output
# [1, 0, 0, 5, 0, 0, 0, 3, 3, 0]